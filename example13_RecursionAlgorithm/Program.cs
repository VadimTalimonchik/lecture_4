// двумерные массивы

// // таблица строк
// string[,] table = new string[2, 5]; // создаём новый массив в котором 2 строки и 5 столбцов
// table[1, 2] = "слово";              // положили в массив заданное значение (слово)
//                                     // для печати или вывода массива используем цикл в цикле
// for(int rows = 0; rows < 2; rows++) // вывод строк
// {
//     for(int columns = 0; columns < 5; columns++) // вывод столбцов
//     {
//         Console.WriteLine($"-{table[rows, columns]}-"); // вывод в кансоль
//     }
// }

// // матрица (прямоугольная таблица чисел)
// int[,] matrix = new int[3, 4];

// for(int i = 0; i < 3; i++)                  // красивый вывод матрици чисел
// {
//     for(int j = 0; j < 4; j++)
//     {
//         Console.Write($"{matrix[i, j]} ");  // вывод в одну строку через пробел
//     }
//     Console.WriteLine();                    // вывод следующей строки через пустую строку
// }

// // универсальное применение цикла
// int[,] matrix = new int[3, 4];

// for(int i = 0; i < matrix.GetLength(0); i++)
// {
//     for(int j = 0; j < matrix.GetLength(1); j++)
//     {
//         Console.Write($"{matrix[i, j]} ");
//     }
//     Console.WriteLine();
// }

// // Заполнение матрицы случайными числами

// void PrintArray(int[,] matr)
// {
//     for(int i = 0; i < matr.GetLength(0); i++)
//     {
//         for(int j = 0; j < matr.GetLength(1); j++)
//         {
//             Console.Write($"{matr[i, j]} ");
//         }
//         Console.WriteLine();
//     }
// }

// void FillArray(int[,] matr)
// {
//     for(int i = 0; i < matr.GetLength(0); i++)
//     {
//         for(int j = 0; j < matr.GetLength(1); j++)
//         {
//             matr[i, j] = new Random().Next(1, 10);
//             // конкретно обращаемся к элементу на позиции [i, j]
//             // используя генератор случайных чисел от 1 до 9 (правая граница не входит)
//         }
//     }   
// }

// int[,] matrix = new int[3, 4];

// PrintArray(matrix);
// FillArray(matrix);
// Console.WriteLine();
// PrintArray(matrix);

// // Закрашивание области

// int[,] pic = new int[,]
// // необязательно указывать количество строк и столбцов в случае
// // если есть фиксированные данные
// {
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
//     {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// };

// void PrintImage(int[,] image)
// {
//     for(int i = 0; i < image.GetLength(0); i++)
//     {
//         for(int j = 0; j < image.GetLength(1); j++)
//         {
//             // Console.Write($"{image[i, j]} ");
//             if(image[i, j] == 0) Console.Write(" ");
//             // если значение image[i, j] совпадает с 0, то будем печатать пробел
//             else Console.Write("+");
//             // иначе будем печатать +
//         }
//         Console.WriteLine();
//     }
// }

// void FillImage(int row, int col) // метод закрашивания (заполнения) картинки
// {
//     if(pic[row, col] == 0)
//     // если текущий пиксель с текущей позицией [row, rol] равен 0, т.е.
//     // он не закрашен, то в этом случае его будем красить, например 1
//     {
//         pic[row, col] = 1;
//         // вызываем методы с правилами заполнения
//         FillImage(row - 1, col); // поднимаемся на строчку выше
//         FillImage(row, col - 1); // в тойже строке смещаемся в лево
//         FillImage(row + 1, col); // опускаемся на строчку ниже
//         FillImage(row, col + 1); // в тойже строке смещаемся вправо
//     }
// }

// PrintImage(pic);    // выводим незакрашенную картинку
// FillImage(13, 13);  // задаём начальную точку (пиксель)
// PrintImage(pic);    // выводим закрашенную картинку

// РЕКУРСИЯ
// // Факториал

// // int Factorial(int n)
// // {
// //     if(n == 1) return 1;
// //     else return n * Factorial(n - 1);
// // }
// // Console.WriteLine(Factorial(3));


// // int Factorial(int n)
// // {
// //     if(n == 1) return 1;
// //     else return n * Factorial(n - 1);
// // }

// // for(int i = 1; i < 40; i++)
// // {
// //     Console.WriteLine($"{i}! = {Factorial(i)}");
// // }

// double Factorial(int n)
// {
//     if(n == 1) return 1;
//     else return n * Factorial(n - 1);
// }

// for(int i = 1; i < 40; i++)
// {
//     Console.WriteLine($"{i}! = {Factorial(i)}");
// }

// // Фибоначи

// // f(1) = 1;
// // f(2) = 2;
// // f(n) = f(n-1) + f(n-2);

// int Fibonacci(int n)
// {
//     if(n == 1 || n == 2) return 1;
//     else return Fibonacci(n - 1) + Fibonacci(n - 2);
// }

// for(int i = 1; i < 10; i++)
// {
//     Console.WriteLine(Fibonacci(i));
// }

double Fibonacci(int n)
{
    if(n == 1 || n == 2) return 1;
    else return Fibonacci(n - 1) + Fibonacci(n - 2);
}
// для проверки на каком числе начинает подтормаживать алгоритм
for(int i = 1; i < 50; i++)
{
    Console.WriteLine($"f({i}) = {Fibonacci(i)}");
}